low_spot <- m - (r2 * std / sqrt(n))
up_spot <- m - (r1 * std / sqrt(n))
return(c(low = low_spot, up = up_spot, mean = m))
}
confidence_interval(grades)
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1+(theta - i)**2)
}
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1+(theta - i)**2)
}
return(-length(x)*log(pi)-j)}
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + ((theta) - i)**2)
}
for (i in 1:length(x)){
j <- j + log(1 + (t - i)**2)
}
return(-length(x)*log(pi)-j)}
return(-length(x)*log(pi)-j)}
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (y - i)**2)
}
Lltheta <- function(theta){
j = 0
for (i in 1:length(x)){
j <- (theta - i) / (1+(theta - i)**2)
}
return(-2j)
}
return(-2j)
for (i in 1:length(x)){
j <- (theta - i) / (1+(theta - i)**2)
}
return(-2j)}
return(-2j))}
j = 0
for (i in 1:length(x)){
j <- (theta - i) / (1+(theta - i)**2)
}
for (i in 1:length(x)){
j <- (theta - i) / (1+(theta - i)**2)
}
return(-2j)}
return(-2j)}
return(-2*j)}
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}
Ltheta(30)
return(-length(x)*log(pi)-j)}
Ltheta(30)
return(-length(x)*log(pi)-j)}
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (Î¸ - i)**2)
}
theta <- theta
theta <- "theta"
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
theta <- as.factor(theta)
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
j <- j + log(1 + (theta-i)**2)
for (i in 1:length(x)){
j <- j + log(1 + (theta-i)**2)
}
return(-length(x)*log(pi)-j)}
theta <- as.numeric(theta)
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
return(-length(x)*log(pi)-j)}
return(-2*j)}
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}
j = 0
Lltheta <- function(theta){
j = 0
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}
return(-2*j)}
return(-2*j)}
View(Lltheta)
return(-2*j)}
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}return(-2*j)}
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}return(-2*j)}
return(-2*j)}
return(-length(x)*log(pi)-j)}
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
View(Lltheta)
return(-length(x)*log(pi)-j)}
return(-length(x)*log(pi)-j)}
Ltheta <- function(theta){
j = 0
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
return(-length(x)*log(pi)-j)
}
Lltheta <- function(theta){
j = 0
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}
return(-2*j)
}
theta <- as.factor(theta)
Ltheta <- function(theta){
j = 0
for (i in 1:length(x)){
j <- j + log(1 + (theta - i)**2)
}
return(-length(x)*log(pi)-j)
}
Lltheta <- function(theta){
j = 0
for (i in 1:length(x)){
j <- j + (theta - i) / (1+(theta - i)**2)
}
return(-2*j)
}
Ltheta(30)
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2)) %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- {runif(40,1,100) + rnorm(40, 0, sqrt(2))} %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- [runif(40,1,100) + rnorm(40, 0, sqrt(2))] %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
#2.
#a.
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2))) %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
filter(grades>0 & grade<100)
filter(grades>0 & grades<100)
filter(grades>0 & grades<100)
filter(grade>0 & grade<100)
filter(grades>0 & grades<100)
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2))) %>%
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
repeat{runif(40,1,100) + rnorm(40, 0, sqrt(2))}(if(grades >100 || grades < 0))
repeat{runif(40,1,100) + rnorm(40, 0, sqrt(2))}(if(grades >100 || grades < 0))
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
(if(grades >100 || grades < 0))
repeat{runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
repeat{runif(40,1,100) + rnorm(40, 0, sqrt(2))
if(grades >100 || grades < 0){
break
}
}
)
grades
#b.
confidence_interval <- function(x){
n <- length(x)
m <- mean(x)
std <- sd(x)
r1 <- qnorm(0.025)
r2 <- qnorm(0.975)
low_spot <- m - (r2 * std / sqrt(n))
up_spot <- m - (r1 * std / sqrt(n))
return(c(low = low_spot, up = up_spot, mean = m))
}
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
repeat{runif(40,1,100) + rnorm(40, 0, sqrt(2))
if(grades >100 || grades < 0){
break
}
}
)
#b.
confidence_interval <- function(x){
n <- length(x)
m <- mean(x)
std <- sd(x)
r1 <- qnorm(0.025)
r2 <- qnorm(0.975)
low_spot <- m - (r2 * std / sqrt(n))
up_spot <- m - (r1 * std / sqrt(n))
return(c(low = low_spot, up = up_spot, mean = m))
}
grades
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
repeat{runif(40,1,100) + rnorm(40, 0, sqrt(2))
if(grades >100 || grades < 0){
break
}
}
)
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
while (grades >100 || grades < 0),
result <- runif(40,1,100) + rnorm(40, 0, sqrt(2)))
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
while (grades >100 || grades < 0)
result <- runif(40,1,100) + rnorm(40, 0, sqrt(2)))
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)),
while (grades >100 || grades < 0)
result <- runif(40,1,100) + rnorm(40, 0, sqrt(2)))
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades <- data.frame(runif(40,1,100) + rnorm(40, 0, sqrt(2)))
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
while (grades >100 || grades < 0){result <- runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades
while (grades >100 || grades < 0){result <- replace(grades, runif(40,1,100) + rnorm(40, 0, sqrt(2))}
while (grades >100 || grades < 0){result <- replace(grades, (runif(40,1,100) + rnorm(40, 0, sqrt(2))}
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
grades
grades <- runif(40,1,100) + rnorm(40, 0, sqrt(2))
replace(grades, grades >100 || grades < 0, runif(40,1,100) + rnorm(40, 0, sqrt(2)))
grades
install.packages(c("adabag", "e1071", "ipred", "randomForest", "rpart.plot", "tree"))
library(datasets)
library(MASS)
data(iris)
head(iris)
pairs(iris, col=iris$Species)
pairs(iris, col=iris$Species)
# training and test data
trainI <- sample(1:150, 75)
traind <- iris[trainI,]
testd <- iris[-trainI,]
### Decision tree ###
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
tree <- rpart(Species ~. ,data=traind, method="class") #inside part: y~X1+X2+...
pred <- predict(tree, newdata=testd, type="class")
table(Real = testd$Species, Predict = pred)
library(rpart.plot)
rpart.plot(tree)
rpart.plot(tree_prune)
#ä¿®åªæ¨¹(Post-Pruning)
tree_prune <- prune(tree, cp=tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
#ä¿®åªæ¨¹(Post-Pruning)
tree_prune <- prune(tree, cp=tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(tree_prune)
install.packages("randomForest")
library(randomForest)
# other parameters: importane = T ,ntree = 100, proximity = T, do.trace = 100)
#na.action = na.omit æéº¼èçna
# By default, randomForest() uses mtry=sqrt(p) (æ¯åç¯é»é¨æ©æ½æ¨£çè®æ¸)for classification tree
rf
# other parameters: importane = T ,ntree = 100, proximity = T, do.trace = 100)
#na.action = na.omit æéº¼èçna
# By default, randomForest() uses mtry=sqrt(p) (æ¯åç¯é»é¨æ©æ½æ¨£çè®æ¸)for classification tree
rf
rf <- randomForest(Species ~ ., data = traind, importance=TRUE)
# other parameters: importane = T ,ntree = 100, proximity = T, do.trace = 100)
#na.action = na.omit æéº¼èçna
# By default, randomForest() uses mtry=sqrt(p) (æ¯åç¯é»é¨æ©æ½æ¨£çè®æ¸)for classification tree
rf
#choose tree no.
plot(rf)
legend("topright", colnames(rf$err.rate),col=1:4,cex=0.8,fill=1:4)
#Evaluate variable importance
importance(rf)
varImpPlot(rf)
varImpPlot(rf)
#prediction
pred=predict(rf, newdata = testd)
table(Real = testd$Species, Predict = pred)
## pc1 vs pc2 plot
biplot(pca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(pca,scale=T,choices=2:3)#é¸2.3çPC
# another way
install.packages("ggfortify")
library(ggfortify)
group = as.factor(cutree(hclust(dist(data)),k=3)) #åä¸ç¾¤
data2 = cbind(data, group)
data2 = cbind(data, group)
data2 = cbind(data, group)
autoplot(prcomp(data, center = TRUE, scale = TRUE), data2, colour = 'group',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3)
finance <- read.csv("financialdata.csv")
data <- finance[,-1] #å»æç¬¬ä¸è¡å¬å¸id
#æFactoråæè½ænumericåæ
data$op_profit_growth_rate <- as.numeric(data$op_profit_growth_rate)
data$current_ratio <- as.numeric(data$current_ratio)
finance <- read.csv("financialdata.csv")
setwd("~/")
setwd("~/Desktop/åæ¥­åæ:R/HW4")
finance <- read.csv("financialdata.csv")
data <- finance[,-1] #å»æç¬¬ä¸è¡å¬å¸id
#æFactoråæè½ænumericåæ
data$op_profit_growth_rate <- as.numeric(data$op_profit_growth_rate)
data$current_ratio <- as.numeric(data$current_ratio)
data$quick_rartio <- as.numeric(data$quick_rartio)
str(data)
#1.
M <- cor(data) #æ±åºæ¸æåå§ååè®æ¸çCorr
#ç¨meltå½æ¸Reshapeè³æ
library(reshape2)
melted_Corrmat <- melt(M)
head(melted_Corrmat)
write.csv(melted_Corrmat,'melted_Corrmat.csv')
#ç«Heatmap
library(ggplot2)
ggplot(data = melted_Corrmat,
aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "grey") +
scale_fill_gradient2(low = "firebrick4", high = "steelblue",
mid = "white", midpoint = 0) +
guides(fill=guide_legend(title="Correlation")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
#2.
library(nsprcomp)
spca <- nscumcomp(data, k=80, nneg=T, scale=T) #æ¯çµ4åéé¶ä¿æ¸*16åè®æ¸
summary(spca)
screeplot(spca)
#2.
library(nsprcomp)
spca <- nscumcomp(data, k=80, nneg=T, scale=T) #æ¯çµ4åéé¶ä¿æ¸*16åè®æ¸
summary(spca)
screeplot(spca)
pve=(spca$sdev)^2 / (sum(spca$sdev^2))
plot(cumsum(pve), xlab="Principal Component", ylab="Cumulative Proportion of Variance Explained ", ylim=c(0,1),type='b')
abline(h=0.8)
#3.
ggplot(melt(spca$rotation), aes(Var2, Var1)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient2(low = "white", high = "steelblue") +
guides(fill=guide_legend(title="Coefficient")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
group = as.factor(cutree(hclust(dist(data)),k=3)) #åä¸ç¾¤
data2 = cbind(data, group)
autoplot(prcomp(data, center = TRUE, scale = TRUE), data2, colour = 'group',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3)
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=2:3)
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=2:3)
biplot(spca,scale=T,choices=1:2)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=1:2)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=3:4)
biplot(spca,scale=T,choices=2:3)
library(ggfortify)
autoplot(prcomp(data, center = TRUE, scale = TRUE),
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 5)
group = as.factor(cutree(hclust(dist(data)),k=3)) #åä¸ç¾¤
data2 = cbind(data, group)
autoplot(prcomp(data, center = TRUE, scale = TRUE), data2, colour = 'group',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3) #æé¡è²è¨­çº3ç¾¤/å¯ä»¥å¤§è´ç¨PC1å»ååºä¸ç¾¤
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=2:3)
biplot(spca,scale=T,choices=3:4)
biplot(spca,scale=T,choices=4:5)
biplot(spca,scale=T,choices=1:5)
biplot(spca,scale=T,choices=1:5)
biplot(spca,scale=T,choices=5:6)
biplot(spca,scale=T,choices=1:2)
biplot(spca,scale=T,choices=2:3)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
library(ggfortify)
autoplot(prcomp(data, center = TRUE, scale = TRUE),
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 5)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=2:3)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=2:3)
group = as.factor(cutree(hclust(dist(data)),k=3)) #åä¸ç¾¤
data2 = cbind(data, group)
autoplot(prcomp(data, center = TRUE, scale = TRUE), data2, colour = 'group',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3) #æé¡è²è¨­çº3ç¾¤/å¯ä»¥å¤§è´ç¨PC1å»ååºä¸ç¾¤
library(ggfortify)
autoplot(prcomp(data, center = TRUE, scale = TRUE),
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 5)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
biplot(spca,scale=T,choices=2:3)
#4.
biplot(spca,scale=T) #first two components/çè®æ¸åsubjectæ¯å¦ç¸é
