View(lec3_data2)
View(lec3_data3)
View(tidy4a)
View(tidy4b)
student %>% inner_join(moodle)
moodle <- read_csv("lec3_data2.csv")
View(lec3_data1)
library(tidyverse)
student <- read_csv("lec3_data1.csv") #讀資料/import dataset
View(lec3_data1)
moodle <- read_csv("lec3_data2.csv")
f <- function(x)
f <- function(x)
df <- data.frame(
a = rnorm(10), # Generate 10 standard normal random numbers
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df <- data.frame(
a = rnorm(10), # 生成10格 standard normal隨機變數
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
View(lec3_data1)
range(df$a)
df$a
normalizedFun <- function(x){
maxmin <- range(x, na.rm = TRUE)
return((x - maxmin[1]) / (maxmin[2] - maxmin[1]))
}
normalizedFun(df$a
normalizedFun(df$a)
normalizedFun(df$a)
normalizedFun(df$b)
return(c(mean, sd, lenth))
count <- length(x)
return(c(mean, sd, count))
return(c(mean(x), sd(x), count(x)))
return(c(average, Std, n)
}
average <- mean(x)
n <- length(data)
return(c(average, Std, n)
}
}
}
return(c(average, Std, n)
}
calculate <- function(data){}
]
calculate(df$a)
Std <- sd(data)
calculate <- function(data){
average <- mean(data)
Std <- sd(data)
n <- length(data)
return(c(average, Std, n)
}
calculate(df$a)
}
calculate(df$a)
return(c(Mean = average, SD = Std, N = n)
}
calculate(df$a)
calculate(df$a)
list(c(Mean = average, SD = Std, N = n)
}
calculate(df$a)
}
list(Mean = average, SD = Std, N = n)
calculate <- function(data){
average <- mean(data)
Std <- sd(data)
n <- length(data)
list(Mean = average, SD = Std, N = n)
}
calculate(df$a)
two.sample.t <- function(p, q){
v1 <- var(p)
v2 <- var(q)
Average1 <- mean(p)
Average2 <- mean(q)
Sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (Average1 - Average2) / sqrt(Sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), polled.vae = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), polled.vae = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(fake$var1, fake$var$2)
two.sample.t(fake$var1, fake$var2)
two.sample.t <- function(p, q){
v1 <- var(p)
v2 <- var(q)
Average1 <- mean(p)
Average2 <- mean(q)
Sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (Average1 - Average2) / sqrt(Sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), polled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), polled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(fake$var1, fake$var2)
two.sample.t(fake$v1, fake$v2)
two.sample.t(fake$var1, fake$var2)
var2 <- rnorm(10, 0 ,1)
var1 <- rnorm(10, 3, 1)
two.sample.t(fake$var1, fake$var2)
t.test(var1, var2)
two.sample.t(var1, var2)
two.sample.t(df)
two.sample.t(df$2)
two.sample.t(var1, var2)
two.sample.t(df$a, df$b)
t <- (Average1 - Average2) / sqrt(Sp*(1/p + 1/q))
n2 <- length(q)
##可用 list(mean = c(m1, m2), pooled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t <- function(p, q){
n1 <- length(p)
n2 <- length(q)
v1 <- var(p)
v2 <- var(q)
Average1 <- mean(p)
Average2 <- mean(q)
Sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (Average1 - Average2) / sqrt(Sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), pooled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), pooled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(df$a, df$b)
t <- (m1 - m2) / sqrt(Sp*(1/n1 + 1/n2))
two.sample.t <- function(p, q){
n1 <- length(p)
n2 <- length(q)
v1 <- var(p)
v2 <- var(q)
m1 <- mean(p)
m2 <- mean(q)
Sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (m1 - m2) / sqrt(Sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), pooled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), pooled.var = ap, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(df$a, df$b)
two.sample.t <- function(p, q){
n1 <- length(p)
n2 <- length(q)
v1 <- var(p)
v2 <- var(q)
m1 <- mean(p)
m2 <- mean(q)
Sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (m1 - m2) / sqrt(Sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), pooled.var = sp, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), pooled.var = sp, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(df$a, df$b)
two.sample.t <- function(p, q){
n1 <- length(p)
n2 <- length(q)
v1 <- var(p)
v2 <- var(q)
m1 <- mean(p)
m2 <- mean(q)
sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (m1 - m2) / sqrt(Sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), pooled.var = sp, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), pooled.var = sp, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(df$a, df$b)
two.sample.t <- function(p, q){
n1 <- length(p)
n2 <- length(q)
v1 <- var(p)
v2 <- var(q)
m1 <- mean(p)
m2 <- mean(q)
sp <- ((p-1)*v1 + (q-1)*v2) /(p + q -2)
t <- (m1 - m2) / sqrt(sp*(1/n1 + 1/n2))
return(c(mean = c(m1, m2), pooled.var = sp, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
##可用 list(mean = c(m1, m2), pooled.var = sp, t = t, pvalue = 2*pt(-abs(t), df = n1+n2-2)))
}
two.sample.t(df$a, df$b)
var1 <- rnorm(10, 3, 1)
var2 <- rnorm(10, 0 ,1)
t.test(var1, var2)
two.sample.t(var1, var2)
4 < 7
if (sample(1:10,1) > 5) {
message("Bingo!")
} else{
message("Fail!")
}
switch(2, #指定執行第二行程式碼，故回傳4
2+3,
2^2,
3*6)
switch(3, #指定執行第二行程式碼，故回傳4
2+3,
2^2,
3*6)
result
for(i in c(1:100)){ #for-loop裡，i會依序帶入1~100的值，重複進行括號內的程式碼
# 迴圈內重複進行的動作
result <- result + i
}
result <- 0
for(i in c(1:100)){ #for-loop裡，i會依序帶入1~100的值，重複進行括號內的程式碼
# 迴圈內重複進行的動作
result <- result + i
}
result
A
for (i in 1:4){
A[i] <- mean(df[,i])
}
A
A <- c()
for (i in 1:4){
A[i] <- mean(df[,i])
}
A
A2[i] <- apply(df$a, 2, mean)
for (i in 1:4){
A2[i] <- apply(df$a, 2, mean)
}
for (i in 1:4){
A2[i] <- mean(df[,i])
}
apply(df, 2, mean)
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts success)
}
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts success)
}
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts success)
}
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts success)
}
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts, success)
}
names(hand) <- paste("h", 1:length(hand), sep = "")
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts, success)
}
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "")
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts, success)
names(hand)
one = function(){
deck <- c(rep("h", 13), rep("d", 13), rep("c", 13), rep("s", 13))
hand <- sample(x = deck, size = 5)
names(hand) <- paste("h", 1:length(hand), sep = "") #把抽出來的牌取名：h1~h5
diamonds <- sum(hand == 'd')
hearts <- sum(hand == 'h')
success <- diamonds == hearts
data.frame(t(hand), diamonds, hearts, success)
}
one()
age <- sample(1:100, 20)
}
age_grp <- function(x){
group.id <- ifelse(x <= 20, "A",
ifelse (x>=21 & x<=40, "B",
ifelse(x>= 41 & x<= 60, "C", "D")))
data.frame(age=x, group.id, row.names = NULL)
}
age_grp(age)
factorial.for <- function(n){
f <- 1
for(i in 1:n){
f <- f*i
}
f
}
factorial.for(5)
repeat{
cross <- cross *k
k <- k +1
}
k <- 1
cross <- 1
cross(5)
cross(5)
cross <- 1
factorial.rep <- function(k){
k <- 1
repeat{
cross <- cross *k
k <- k + 1
}
}
factorial.rep(5)
factorial.rep(5)
coin <- function(x){
face <- c(rep("U", 1), rep("D", 1))
flip <- sample(x = face, size = 3)
names(flip) <- paste("1", 1:length(flip), sep = "")
UP <- sum(face == "U")
success <- UP == 3
data.frame(t(flip), UP, success)
}
coin()
face <- c("U","D")
coin <- function(x){
face <- c("U","D")
flip <- sample(x = face, size = 3)
names(flip) <- paste("1", 1:length(flip), sep = "")
UP <- sum(face == "U")
success <- UP == 3
data.frame(t(flip), UP, success)
}
coin()
result
while (sum(result) < 3){
result[i] <- sample(coin, size = 1)
i <- i + 1
}
result
result(length)
result <- c()
coin <- c(1,0)
i <- 1
while (sum(result) < 3){
result[i] <- sample(coin, size = 1)
i <- i + 1
}
result
result(length)
length(result)
data(iris)
n <- nrow(iris)
D <- matrix(0, n, n)
data <- iris[,-5]
for(i in 1:n){
for(j in 1:n){
D[i, j] <- (sum(data[i,]-data[j,])^2))^0.5
}
}
for(i in 1:n){
for(j in 1:n){
D[i, j] <- (sum((data[i,]-data[j,])^2))^0.5
}
}
D
for(i in 1:n){
for(j in 1:n){
D[i, j] <- (sum((data[i,]-data[j,])^2))^0.5
}
}
library(tidyverse)
library(readr)
watch.table <- read_csv("watch_table.csv")
user.table <- read_csv("user_table.csv")
drama.table <- read_csv("drama_table.csv")
## 1. 將 watch.table 與其他兩個報表合併為full.table
full.table <- watch.table %>%
left_join(user.table, by = "user_id") %>%
left_join(drama.table, by = "drama_id")
watch.table <- read_csv("watch_table.csv")
setwd("~/Desktop/商業分析:R/HW1")
watch.table <- read_csv("watch_table.csv")
user.table <- read_csv("user_table.csv")
drama.table <- read_csv("drama_table.csv")
## 1. 將 watch.table 與其他兩個報表合併為full.table
full.table <- watch.table %>%
left_join(user.table, by = "user_id") %>%
left_join(drama.table, by = "drama_id")
View(full.table)
## 2. 分析full.table，計算每部劇男生、女生觀看次數
full.table %>%
group_by(drama_name) %>%
summarise(female_number = length(which(gender == "female")),
male_number = length(which(gender == "male")))
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n())
full.table %>%
group_by(gender) %>%
filter(device == "Android") %>%
summarise(gender_distribute = n())
full.table %>%
group_by(drama_name) %>%
filter(device == "Android") %>%
summarise(drama_distribute = n())
full.table %>%
group_by(location) %>%
filter(device == "Android") %>%
summarise(location_distribute = n())
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n(),
propotion = n()/n(full.table))
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n(),
propotion = n()/n(full.table))
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n(),
propotion = n()//n(full.table))
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n(),
propotion = n()/n(full.table))
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n(),
propotion = n()/n())
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n(),
propotion = n()/n(full.table))
## 3. 找出用Android系統的，針對這類客戶進行分析。
full.table %>%
filter(device == "Android") %>%
summarise(Avg_age = mean(age),
total_number = n())
abnyc.table <- read.csv("AB_NYC_2019.csv")
## 1. 找出 neighbourhood_group == "Manhattan"的資料，利用ggplot畫經緯度的scatter plot。
abnyc.table %>%
filter(neighbourhood_group == "Manhattan") %>%
ggplot(aes(x=latitude, y=longitude, color=room_type)) +
geom_point()
## 2. 針對曼哈頓資料，對number_of_reviews >=400的畫bar chart。
abnyc.table %>%
filter(neighbourhood_group == "Manhattan" & number_of_reviews >= 400) %>%
ggplot(aes(x=number_of_reviews)) +
geom_bar(fill="blue")
## 4.建立一筆新資料，將3.找出的neighbourhood篩選出來，去除掉NA值後，進行EDA分析，並簡單介紹最高房價及最低房價分別的類型。
new.table <- na.omit(abnyc.table %>%
filter(neighbourhood == "Harlem"))
new.table %>%
group_by(room_type) %>%
arrange(desc(price)) %>%
ggplot(aes(x=room_type, y=price, fill=room_type)) +
geom_bar(stat = "identity")
full.table %>%
group_by(user_name) %>%
filter(device == "Android") %>%
summarise(user_distribute = n())
## 4. 針對台北男性這類客戶進行分析。
full.table %>%
filter(location == "Taipei" & gender == "male") %>%
summarise(Avg_age = mean(age),
total_number = n())
full.table %>%
group_by(drama_name) %>%
filter(location == "Taipei" & gender == "male") %>%
summarise(drama_distribute = n())
full.table %>%
group_by(device) %>%
filter(location == "Taipei" & gender == "male") %>%
summarise(device_distribute = n())
